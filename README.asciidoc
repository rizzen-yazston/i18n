= Internationalisation
Rizzen Yazston
:url-unicode: https://unicode.org/
:icu4x: https://github.com/unicode-org/icu4x

Welcome to the Internationalisation (I18n) project.

The *Internationalisation* project provides alternative components for the {icu4x}[*ICU4X*] project (maintained by the {url-unicode}[*Unicode Consortium*]), yet still depends on many core components of ICU4X for internal functionality, thus can also be seen as an extension library to ICU4X. The Internationalisation project consists of an alternative messaging system, and adding macro functionality to patterns when formatting strings for locales (language tags).

The repository contains the following crates:

- `i18n`: The convenience meta crate that contains selected available crates,

- `i18n_icu`: Contains ICU4X data provider helper,

- `i18n_lexer`: A simple lexer to tokenise a string,

- `i18n_message`: The multilingual messaging system,

- `i18n_pattern`: Similar to the `icu_pattern` crate of ICU4X, though with the added support of macro functionality,

- `i18n_provider`: Trait for providing language strings, and error struct,

- `i18n_provider_sqlite3`: Implementation of `i18n_provider` using Sqlite3 as its data store,

- `i18n_utility`: Contains the Language tag registry, and the LString type (language tagged string).

NOTE: All these crates on `crates.io` have the names appended with the suffix `-rizzen-yazston` to distinguish them from internationalisation crates created by other authors.

== Features

Available features for `i18n` crate:
 
* `compiled_data`: Allow for the internal data of the various ICU4X components.
 
* `blob`: Allow for instances of `BlobDataProvider` to be used various ICU4X components that supports {BufferProvider}[`BufferProvider`].
 
* `fs`: Allow for instances of `FsDataProvider` to be used various ICU4X components that supports `BufferProvider`.

* `sync`: Allow for rust's concurrency capabilities to be used. Use of `Arc` and `Mutex` instead `Rc` and `RefCell`.

== Acknowledgement

Stefano Angeleri for advice on various design aspects of implementing the components of the internationalisation project, and also providing the Italian translation of error message strings.

== Usage

For most use cases, just the use of `i18n-rizzen-yazston` crate will be sufficient to use the multilingual message system, though the individual crates can be selected individual if the entire `i18n` project is not required.

=== Cargo.toml

```
[dependencies]
i18n-rizzen-yazston = "0.6.1"
```

=== Examples
 
See the various component crates for usage examples.
 