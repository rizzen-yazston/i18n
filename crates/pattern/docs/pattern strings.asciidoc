= Pattern Strings

Pattern strings are text strings that contain placeholder patterns, that are replaced with actual value text at a later stage. Placeholders are represented by text enclosed within a pair of braces (`{}`), or the special number sign pattern (`#`).

== Grammar

This is the full grammar of pattern strings. The grammar presented here is inspired by the Rust string format modules, and the Unicode ICU's Pattern strings.

```
entire             = [ main_string, named_group? ]? ; empty string is possible and is allowed.
main_string        = text* , [ main_syntax , text* ]*
main_syntax        = literal / pattern
named_group        = `#` , PWS* , named_string+
named_string       = `{` , branch , PWS+ , string , `}` , PWS*
string             = text* , [ syntax , text* ]*
syntax             = literal / `#` / pattern
literal            = backtick , [ backtick / `#` / `{` / `}` ]
pattern            = `{` , type , `}` ; Future: may allow {} to be short hand for `{`}
type               = literal_text / command / placeholder
command            = `#` , identifier+ , [ PWS* , `#` ] , [ PWS+ , parameter ]+
parameter          = literal_text / identifier+
placeholder        = identifier+, [ PWS+ , simple / complex ]?
simple             = decimal / date_time ; add other types when available in ICU, such as `currency`
decimal            = `decimal` , [ PWS+ , decimal_keyboard ]*
decimal_keyword    = decimal_group / decimal_sign
decimal_group      = `group` , `#` , `auto` / `never` / `always` / `min2`
decimal_sign       = `sign` , `#` , `auto` / `never` / `always` / `except_zero` / `negative`
date_time          = `date_time` , [ PWS+ , date_time_keyboard ]*
date_time_keyword  = date_time_length / date_time_hour / date_time_calendar
date_time_length   = `date` / `time` , `#` , `full` / `long` / `medium` / `short`
date_time_hour     = `hour` , `#` , `24` / `23` / `12` / `11`
date_time_calendar = `calendar` , `#` , `gregory` / `buddhist` / `japanese` / `coptic` / `indian` / `ethiopic` / 'iso'
complex            = plural / select
plural             = `ordinal` / `plural` , [ PWS+ , plural_category, `#` , branch ]+
plural_category    = `zero` / `one` / `two` / `few` / `many` / `other`
select             = `select` , [ PWS+ , selector, `#`, branch ]+ 
selector           = `other` / identifier+
branch             = identifier+
identifier         = . \ [ PWS / PS ]
text               = . \ [ `{` / `}` / `#` / backtick ]
literal_text       = backtick , [ literal_character / literal_backtick ]* , backtick ; It is possible to have empty
                                                                                     ; literal strings
literal_character  = . \ backtick
literal_backtick   = backtick, backtick
PS                 = .Pattern_Syntax ; All unicode character with property Pattern_Syntax,
                                     ; excludes 0x5f (low line (underscore)).
PWS                = .Pattern_White_Space ; All unicode character with property Pattern_White_Space.
backtick           = 0x60
```

Additional conditions that can't be represented in the grammar above:

* for `plural`, `ordinal` and `select`: the selector `other` must be present in the pattern.

* for `decimal`: both `group` and `sign` are optional and when not present the default value is `auto`. Included `auto` for those whom want to indicate the option explicitly.

* for `date_time`: both `date` and `time` are optional, and when not present the default value is `medium`. Included `medium` for those whom want to indicate the option explicitly.

== Note

* `hour` option is still experimental in `ICU4X` library, thus not implemented.

* `calendar` option does not change date-time to the calendar, rather just checks that locale is for the calendar.

* for `ordinal` and `plural`: only positive integers are allowed for values, that are translated to plural_category using ICU4X's PluralRules.

== Examples

- Empty strings are valid. Can simply mean there is no available localised version of a string, and should bypass the entire parsing process as there is nothing to do.

- Most basic pattern, just a simple text string: "An example with no patterns.".

- A complex pattern example: "There {dogs_number plural one#one_dog other#dogs} in the park.#{dogs are # dogs}{one_dog is 1 dog}"

- In text sections, when a grammar syntax character is preceded by a backtick the syntax character is treated as a literal text character: backtick `++``++`, number sign `++`#++`, curly brackets `++`{++` and `++`}++`, and combinations such as `++`{`#++`.

== Design Ideas

=== Literal characters

- `++``++` is literal `++`++` in text string.

- `++`{++` is literal `{` in text string.

- `++`}++` is literal `}` in text string.

- `++`#++` is a literal `#` in text substring.

- `++`{`#++` is literal `{#` in text string. Both need to be escaped.

- Future: `{}` is literal `{}` in text string as it is just an empty pattern.

=== patterns

- After `++#++` separator of main string, `++{++identifier {text}}` is a named selection branch for complex pattern types, that branch on values. Placed at end of string.

- `++#++` is a pattern for the number in plural formatting substring.

- `{++`text`++}` indicates literal constant text, usually names of people, places, and products.

- `{#command [parameter]*}` indicates an user defined command (a call back function) to produce constant string, such as file paths.

- `{identifier [parameter]*}` pattern for some value.

