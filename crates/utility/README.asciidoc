= i18n_utility
Rizzen Yazston
:Locale: https://docs.rs/icu/latest/icu/locid/struct.Locale.html
:icu_locid: https://crates.io/crates/icu_locid
:icu: https://crates.io/crates/icu
:ICU4X: https://github.com/unicode-org/icu4x
:Unicode Consortium: https://home.unicode.org/
:LanguageIdentifier: https://docs.rs/icu/latest/icu/locid/struct.LanguageIdentifier.html
:BCP_47_Language_Tag: https://www.rfc-editor.org/rfc/bcp/bcp47.txt


The `i18n_utility` crate contains various useful components that be handy to the users of the Internationalisation project.

Contains the follow modules:

* `locale`: Module for locale related components:

** `LocaleRegistry`: Registry for holding {ICU4X}[`ICU4X`] {Locale}[`Locale`] types.

== Registry for {Locale}[`Locale`] types.

This module contains the `LocaleRegistry` type, to provide a simple container that contains {Locale}[`Locale`] types for provided language tags. The purpose of the registry is to reduce the need of parsing language tags repeatedly, by storing the result {Locale}[`Locale`] for provided language tag in the registry, and uses the existing {Locale}[`Locale`] for the language tag when requested.

The {Locale}[`Locale`] type can be provided by either the {icu_locid}[`icu_locid`] crate or the {icu}[`icu`] meta-crate. These two crates are part of the {ICU4X}[`ICU4X`] protect developed by the {Unicode_Consortium}[Unicode Consortium].

This crate makes use of the {Locale}[`Locale`] type instead of the {LanguageIdentifier}[`LanguageIdentifier`] type due to that the {Locale}[`Locale`] type supports the entire {BCP_47_Language_Tag}[BCP 47 Language Tag] specification, where as the {LanguageIdentifier}[`LanguageIdentifier`] type excludes the **extension** subtags of the BCP 47 Language Tag specification.

=== Examples

```
use icu_locid::Locale;
use std::rc::Rc;
use i18n_utility::locale::LocaleRegistry;

let mut registry = LocaleRegistry::new();
let locale = registry.get( "en_ZA".to_string() ).expect( "Failed to parse language tag." );
let entries = registry.list().iter().count();

assert_eq!( locale.to_string(), "en-ZA", "Did not convert en_ZA to en-ZA BCP 47 format." );
assert_eq!( entries, 2, "Supposed to be 2 entries: en_ZA and en-ZA." )
```
